---
alwaysApply: true
---

# Pattern Consistency Rule

## Before Implementing Any New Code

**ALWAYS** check existing patterns in the codebase first:

### 1. **Repository Pattern**
- Check `src/repositories/` for existing repository implementations
- Follow the exact same import pattern: `import prisma from '../common/prisma'`
- Use direct `prisma.model.*` calls, NOT dependency injection
- Match the class structure and method patterns

### 2. **Service Pattern**
- Check `src/apis/*/` for existing service implementations
- Follow the same constructor injection patterns
- Match error handling and response patterns
- Use the same validation approaches

### 3. **Entity Pattern**
- Check `src/repositories/entities/` for existing entity structures
- Follow the same interface/type definitions
- Use the same factory function patterns (`createEntity`, `updateEntity`)
- Match the same property naming conventions

### 4. **Module Pattern**
- Check existing modules in `src/apis/` and `src/repositories/`
- Follow the same import/export patterns
- Match the same provider registration approach
- Use consistent module structure

### 5. **Utility Pattern**
- Check `src/utils/` and `src/helpers/` for existing utility patterns
- Follow the same function organization and naming
- Match the same error handling approaches
- Use consistent parameter and return type patterns

## Required Steps Before Implementation

1. **Search the codebase** for similar functionality
2. **Read existing implementations** to understand patterns
3. **Follow the exact same approach** used in similar code
4. **Don't introduce new patterns** unless absolutely necessary
5. **Ask for clarification** if patterns are unclear

## Examples of What to Check

- **Dependency Injection**: How are services/repositories injected?
- **Import Statements**: What import patterns are used?
- **Error Handling**: How are errors handled and returned?
- **Type Definitions**: How are interfaces and types structured?
- **Method Naming**: What naming conventions are used?
- **File Organization**: How are files structured and organized?

## Failure to Follow This Rule

If you don't follow existing patterns, you will be called out and asked to fix the implementation to match the codebase conventions.

---

This rule will help ensure consistency and prevent introducing patterns that don't match your existing codebase architecture.
description:
globs:
alwaysApply: false
---
