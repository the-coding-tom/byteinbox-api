// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base models following the style guide patterns
model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String?  // Nullable for OAuth-only users
  firstName  String?  @map("first_name")
  lastName   String?  @map("last_name")
  phoneNumber String? @map("phone_number")
  userType   UserType @default(USER) @map("user_type") // User type (user, admin, etc.)
  status     UserStatus @default(PENDING) @map("status")
  isEmailVerified Boolean @default(false) @map("is_email_verified")
  lastLoginAt DateTime? @map("last_login_at")
  
  // OAuth fields
  oauthProvider String? @map("oauth_provider") // google, facebook, etc.
  oauthId      String? @map("oauth_id")
  
  // 2FA fields
  totpSecret   String? @map("totp_secret") // For authenticator apps
  totpEnabled  Boolean @default(false) @map("totp_enabled") // Whether TOTP is enabled and verified
  
  // Verification tokens
  emailVerificationToken String? @map("email_verification_token")
  emailVerificationExpiresAt DateTime? @map("email_verification_expires_at")
  passwordResetToken String? @map("password_reset_token")
  passwordResetExpiresAt DateTime? @map("password_reset_expires_at")
  
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  createdBy  Int?     @map("created_by")
  updatedBy  Int?     @map("updated_by")

  // Relations
  createdByUser User? @relation("UserCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("UserUpdatedBy", fields: [updatedBy], references: [id])
  
  // Self-referencing relations
  usersCreated User[] @relation("UserCreatedBy")
  usersUpdated User[] @relation("UserUpdatedBy")
  
  // Session tracking
  refreshTokens RefreshToken[]
  mfaSessions MfaSession[]
  recoverySessions RecoverySession[]

  // Email template relations
  emailTemplatesCreated EmailTemplate[] @relation("EmailTemplateCreatedBy")
  emailTemplatesUpdated EmailTemplate[] @relation("EmailTemplateUpdatedBy")

  // Blacklist relations
  blacklistsCreated Blacklist[] @relation("BlacklistCreatedBy")
  blacklistsUpdated Blacklist[] @relation("BlacklistUpdatedBy")

  // Role and Permission creation tracking
  rolesCreated Role[] @relation("RoleCreatedBy")
  rolesUpdated Role[] @relation("RoleUpdatedBy")
  permissionsCreated Permission[] @relation("PermissionCreatedBy")
  permissionsUpdated Permission[] @relation("PermissionUpdatedBy")

  // API Key relations
  apiKeys ApiKey[]
  
  // Backup Codes relations
  backupCodes BackupCode[]
  
  // Login Activity relations
  loginActivities LoginActivity[]

  // Team Management
  teamsCreated Team[] @relation("TeamCreatedBy")
  teamsUpdated Team[] @relation("TeamUpdatedBy")
  teamApiKeysCreated TeamApiKey[] @relation("TeamApiKeyCreatedBy")

  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

// Email Template Management
model EmailTemplate {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  subject     String
  htmlContent String   @map("html_content")
  textContent String?  @map("text_content")
  isActive    Boolean  @default(true) @map("is_active")
  isDefault   Boolean  @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   Int?     @map("created_by")
  updatedBy   Int?     @map("updated_by")

  // Relations
  createdByUser User? @relation("EmailTemplateCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("EmailTemplateUpdatedBy", fields: [updatedBy], references: [id])

  @@map("email_templates")
}

// MFA Session Management
model MfaSession {
  id          Int      @id @default(autoincrement())
  sessionToken String  @unique @map("session_token")
  userId      Int      @map("user_id")
  email       String
  mfaMethod   MfaMethod @map("mfa_method")
  isVerified  Boolean  @default(false) @map("is_verified")
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mfa_sessions")
}


// Recovery Session Management
model RecoverySession {
  id            Int      @id @default(autoincrement())
  recoveryToken String   @unique @map("recovery_token")
  userId        Int      @map("user_id")
  isUsed        Boolean  @default(false) @map("is_used")
  expiresAt     DateTime @map("expires_at")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recovery_sessions")
}


// Blacklist Management
model Blacklist {
  id        Int      @id @default(autoincrement())
  type      BlacklistType
  value     String   // IP address, email, phone, etc.
  reason    BlacklistReason
  duration  BlacklistDuration
  expiresAt DateTime? @map("expires_at")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int?     @map("created_by")
  updatedBy Int?     @map("updated_by")

  // Relations
  createdByUser User? @relation("BlacklistCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("BlacklistUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([type, value])
  @@map("blacklists")
}

// Role and Permission Management
model Role {
  id          Int      @id @default(autoincrement())
  name        RoleName @unique
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   Int?     @map("created_by")
  updatedBy   Int?     @map("updated_by")

  // Relations
  createdByUser User? @relation("RoleCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("RoleUpdatedBy", fields: [updatedBy], references: [id])

  @@map("roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        PermissionName @unique
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   Int?     @map("created_by")
  updatedBy   Int?     @map("updated_by")

  // Relations
  createdByUser User? @relation("PermissionCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("PermissionUpdatedBy", fields: [updatedBy], references: [id])

  @@map("permissions")
}


// API Key Management System
model ApiKey {
  id          Int      @id @default(autoincrement())
  key         String   @unique // API key (e.g., "ak_live_abc123...")
  name        String   // Human-readable name
  description String?  // Optional description
  userId      Int      @map("user_id") // Owner of the API key
  scopes      String[] // Permissions/scopes for this key
  isActive    Boolean  @default(true) @map("is_active")
  lastUsedAt  DateTime? @map("last_used_at")
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}


// Backup Codes for 2FA Recovery
model BackupCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  code      String   // Hashed backup code
  isUsed    Boolean  @default(false) @map("is_used")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("backup_codes")
}

// Login Activity Tracking for Security Alerts
model LoginActivity {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  ipAddress  String   @map("ip_address")
  userAgent  String   @map("user_agent")
  location   String?  // Country/city (optional, can use a geo-IP service)
  success    Boolean  // Whether the login attempt was successful
  createdAt  DateTime @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("login_activities")
}

// Team Management System
model Team {
  id          Int      @id @default(autoincrement())
  name        String   // Team name
  description String?  // Optional description
  slug        String   @unique // URL-friendly identifier (e.g., "my-team")
  avatar      String?  // Team avatar/logo URL
  isDefault   Boolean  @default(false) @map("is_default") // Whether this is a default team
  isPublic    Boolean  @default(false) @map("is_public") // Whether team is visible to all users
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   Int      @map("created_by")
  updatedBy   Int?     @map("updated_by")

  // Relations
  createdByUser User @relation("TeamCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("TeamUpdatedBy", fields: [updatedBy], references: [id])
  
  // Team resources
  teamApiKeys TeamApiKey[]

  @@map("teams")
}


// Team-specific API Keys
model TeamApiKey {
  id          Int      @id @default(autoincrement())
  teamId      Int      @map("team_id")
  key         String   @unique
  name        String
  description String?
  scopes      String[] // Team-specific permissions
  isActive    Boolean  @default(true) @map("is_active")
  lastUsedAt  DateTime? @map("last_used_at")
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   Int      @map("created_by")

  // Relations
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdByUser User   @relation("TeamApiKeyCreatedBy", fields: [createdBy], references: [id])

  @@map("team_api_keys")
}


// ENUMS - All enums organized at the bottom for better readability

// User Enums
enum UserStatus {
  ACTIVE
  PENDING
  SUSPENDED
  DELETED
  
  @@map("user_status")
}

enum UserType {
  USER
  ADMIN
  SUPER_ADMIN
  
  @@map("user_type")
}

enum MfaMethod {
  EMAIL
  TOTP
  SMS
  
  @@map("mfa_method")
}


// Blacklist Management Enums
enum BlacklistType {
  IP_ADDRESS
  EMAIL
  PHONE
  USER_AGENT
  
  @@map("blacklist_type")
}

enum BlacklistReason {
  SUSPICIOUS_ACTIVITY
  SPAM
  ABUSE
  SECURITY_VIOLATION
  MANUAL_BAN
  
  @@map("blacklist_reason")
}

enum BlacklistDuration {
  TEMPORARY
  PERMANENT
  CUSTOM
  
  @@map("blacklist_duration")
}

// Role and Permission Enums
enum RoleName {
  USER_MANAGER
  SECURITY_ADMIN
  CONTENT_MODERATOR
  SUPPORT_AGENT
  SYSTEM_ADMIN
  FINANCE_ADMIN
  AUDIT_ADMIN
  
  @@map("role_name")
}

enum PermissionName {
  // User Management
  VIEW_USERS
  CREATE_USERS
  UPDATE_USERS
  DELETE_USERS
  RESET_USER_MFA
  UNLOCK_USER_ACCOUNT
  DEACTIVATE_USER_ACCOUNT
  VIEW_USER_SESSIONS
  REVOKE_USER_SESSIONS
  
  // Security Management
  VIEW_BLACKLIST
  MANAGE_BLACKLIST
  VIEW_AUDIT_LOGS
  MANAGE_SECURITY_SETTINGS
  VIEW_SECURITY_REPORTS
  
  // Content Management
  MODERATE_CONTENT
  APPROVE_CONTENT
  DELETE_CONTENT
  VIEW_CONTENT_REPORTS
  
  // System Management
  MANAGE_SYSTEM_SETTINGS
  VIEW_SYSTEM_LOGS
  MANAGE_EMAIL_TEMPLATES
  VIEW_SYSTEM_METRICS
  
  // Financial Management
  VIEW_FINANCIAL_DATA
  MANAGE_PAYMENTS
  VIEW_TRANSACTION_LOGS
  MANAGE_REFUNDS
  
  // Audit and Compliance
  VIEW_AUDIT_TRAILS
  EXPORT_AUDIT_DATA
  MANAGE_COMPLIANCE_REPORTS
  
  @@map("permission_name")
}

